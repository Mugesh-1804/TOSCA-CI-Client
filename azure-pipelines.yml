trigger: none  # Manual trigger only

variables:
  toscaServerUrl: 'https://tosca.corp.pattersoncompanies.com'
  projectName: 'Tosca_PattersonAutomation'
  clientId: '-4m_zGxoBESTvMw7zvlmjg'
  clientSecret: '8t2ryHp3JkOVrc5837s0AwNVduR3u-AEOV9hY3xU2cfQ'  # Use secret from variable group

pool:
  name: 'TOSCA CI'

steps:

# Step 1: Run Tosca Test Event
- task: PowerShell@2
  displayName: 'Run Tosca Test Event'
  timeoutInMinutes: 240
  inputs:
    targetType: 'filePath'
    filePath: 'C:\\tmp\\ExecutionClients\\tosca_execution_clientNew.ps1'
    arguments: >
      -toscaServerUrl "$(toscaServerUrl)"
      -events '["$(testEventName)"]'
      -projectName "$(projectName)"
      -clientId "$(clientId)"
      -clientSecret "$(clientSecret)"
      -testCaseName "$(testCaseName)"

# Step 2: Copy and Rename Tosca Report with Build Number
- task: PowerShell@2
  displayName: 'Copy and Rename Tosca Report with Build Number'
  condition: always()
  inputs:
    targetType: 'inline'
    script: |
      $username = "$(shareUsername)"
      $password = "$(sharePassword)" | ConvertTo-SecureString -AsPlainText -Force
      $credential = New-Object System.Management.Automation.PSCredential ($username, $password)

      $testCase = "$env:testCaseName"
      $buildNumber = $env:BUILD_BUILDNUMBER

      $networkPath = "\\tosca.corp.pattersoncompanies.com\sap_automation_test_evidence"
      $sourceRelPath = "Projects\JenkinsTestCases\Deals\$testCase\$testCase.html"
      $targetRelPath = "Projects\JenkinsTestCases\Deals\$testCase\$testCase-$buildNumber.html"

      New-PSDrive -Name "Z" -PSProvider FileSystem -Root $networkPath -Credential $credential -Persist
      $sourcePath = "Z:\$sourceRelPath"
      $targetPath = "Z:\$targetRelPath"

      if (Test-Path $sourcePath) {
          Copy-Item -Path $sourcePath -Destination $targetPath -Force
          Write-Host "‚úÖ Report copied to: $targetPath"
      } else {
          Write-Host "‚ö†Ô∏è Report not found at: $sourcePath"
      }

      Remove-PSDrive -Name "Z"

- task: PowerShell@2
  displayName: 'Wait for 20 seconds'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Waiting for 20 seconds..."
      Start-Sleep -Seconds 20

# Step 3: Analyze Tosca Execution XML
- task: PowerShell@2
  displayName: 'Analyze Tosca Execution XML'
  condition: always()
  inputs:
    targetType: 'inline'
    script: |
      # === CONFIGURATION ===
      $reportFolder          = 'C:\tmp\ExecutionClients\results'
      $targetTestCaseName    = '$(testCaseName)'
      $failureOutputBasePath = '\\tosca.corp.pattersoncompanies.com\sap_automation_test_evidence\Projects\JenkinsTestCases\Deals\FailureReasons'
      $networkBasePath       = '\\tosca.corp.pattersoncompanies.com\sap_automation_test_evidence\Projects\JenkinsTestCases\Deals\FailureReasons'
      $buildNumber           = $env:BUILD_BUILDNUMBER
      $passResultPath        = "\\tosca.corp.pattersoncompanies.com\sap_automation_test_evidence\Projects\JenkinsTestCases\Deals\$targetTestCaseName\$targetTestCaseName-$buildNumber.html"

      Write-Host "üìÅ Looking for Execution-ID in build log..."
      $logPath = "$reportFolder\$executionId_results.xml"
      $executionId = $null

      if (Test-Path $logPath) {
        foreach ($line in Get-Content $logPath) {
          if ($line -match 'Successfully enqueued execution with id "(.*?)"') {
            $executionId = $matches[1]; break
          }
        }
      }

      if (-not $executionId) {
        Write-Host "‚ùå Execution-ID not found in log."; exit 1
      }

      Write-Host "‚úÖ Execution-ID found: $executionId"

      # === Locate XML file for the Execution-ID ===
      $xmlFile = Get-ChildItem -Path $reportFolder -Filter "*$executionId*_results.xml" | Select-Object -First 1

      if (-not $xmlFile) {
        Write-Host "‚ùå XML file for Execution-ID '$executionId' not found."; exit 1
      }

      Write-Host "‚úÖ XML file located: $($xmlFile.FullName)"

      # === Parse XML and locate testcase ===
      [xml]$xml = Get-Content $xmlFile.FullName
      $tcNode  = $xml.SelectNodes('//testcase') | Where-Object { $_.name -eq $targetTestCaseName }

      if (-not $tcNode) {
        Write-Host "‚ùå Test case '$targetTestCaseName' not found in XML."; exit 1
      }

      $hasFailure = $tcNode.failure -ne $null
      $hasError   = $tcNode.error   -ne $null

      if ($hasFailure -or $hasError) {
        Write-Host "‚ùå Test case '$targetTestCaseName' FAILED."

        # === Create output folder if not exists ===
        $failDir = Join-Path $failureOutputBasePath $targetTestCaseName
        if (-not (Test-Path $failDir)) { New-Item $failDir -ItemType Directory | Out-Null }

        # === Copy original XML ===
        Copy-Item $xmlFile.FullName -Destination (Join-Path $failDir $xmlFile.Name) -Force

        # === Extract failure message ===
        $msg = if ($hasFailure) { $tcNode.failure.InnerText.Trim() } elseif ($hasError) { $tcNode.error.InnerText.Trim() } else { 'Unknown failure' }

        # === Write .txt file ===
        $txtName = $xmlFile.Name.Replace('.xml', '.txt')
        $txtPath = Join-Path $failDir $txtName

        $lines = @(
          "TestCaseName: $targetTestCaseName",
          "BuildNumber : $buildNumber",
          "",
          "Failure Reason:",
          $msg
        )
        $lines | Set-Content -Path $txtPath

        $uncTxt = "$networkBasePath\$targetTestCaseName\$txtName"
        Write-Host "üìÑ Failure reason saved: $uncTxt"

        # ‚ùó Fail pipeline
        exit 1
      }
      else {
        Write-Host "‚úÖ Test case '$targetTestCaseName' PASSED."
        Write-Host "üìÑ Result HTML: $passResultPath"
        exit 0
      }

# Step 4: Publish Report Link Markdown
- task: PublishPipelineArtifact@1
  displayName: 'Publish Tosca Report Link'
  condition: always()
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)\ToscaReport.md'
    artifact: 'ToscaReportMarkdown'

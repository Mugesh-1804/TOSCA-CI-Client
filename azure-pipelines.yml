trigger: none  # Manual trigger only

variables:
  - group: ToscaSecrets  # This pulls in toscaServerUrl,clientSecret,clientID,projectName,shareUsername and sharePassword securely

pool:
  name: 'TOSCA CI'

steps:
# Step 1: Run Tosca Test Event
- task: PowerShell@2
  displayName: 'Run Tosca Test Event'
  timeoutInMinutes: 240
  inputs:
    targetType: 'filePath'
    filePath: 'C:\\tmp\\ExecutionClients\\tosca_execution_clientNew.ps1'
    arguments: >
      -toscaServerUrl "$(toscaServerUrl)"
      -events '["$(testEventName)"]'
      -projectName "$(projectName)"
      -clientId "$(clientId)"
      -clientSecret "$(clientSecret)"
      -testCaseName "$(testCaseName)"

# Step 2: Copy and Rename Tosca Report with Build Number

- task: PowerShell@2
  displayName: 'Copy and Rename Tosca Report with Build Number'
  condition: always()
  inputs:
    targetType: 'inline'
    script: |
      $username = "$(shareUsername)"
      $password = "$(sharePassword)" | ConvertTo-SecureString -AsPlainText -Force
      $credential = New-Object System.Management.Automation.PSCredential ($username, $password)

      $testCase = "$env:testCaseName"
      $buildNumber = $env:BUILD_BUILDNUMBER

      $networkPath = "\\tosca.corp.pattersoncompanies.com\sap_automation_test_evidence"
      $sourceRelPath = "Projects\JenkinsTestCases\Deals\$testCase\$testCase.html"
      $targetRelPath = "Projects\JenkinsTestCases\Deals\$testCase\$testCase-$buildNumber.html"

      New-PSDrive -Name "Z" -PSProvider FileSystem -Root $networkPath -Credential $credential -Persist
      $sourcePath = "Z:\$sourceRelPath"
      $targetPath = "Z:\$targetRelPath"

      if (Test-Path $sourcePath) {
          Copy-Item -Path $sourcePath -Destination $targetPath -Force
          Write-Host "‚úÖ Report copied to: $targetPath"
      } else {
          Write-Host "‚ö†Ô∏è Report not found at: $sourcePath"
      }

      Remove-PSDrive -Name "Z"

# Step 3: Analyze Tosca Execution XML
- task: PowerShell@2
  displayName: Analyze Tosca Execution XML
  condition: always()
  inputs:
    targetType: inline
    script: |
      $reportFolder          = 'C:\tmp\ExecutionClients\results'
      $targetTestCaseName    = '$(testCaseName)'
      $failureOutputBasePath = '\\tosca.corp.pattersoncompanies.com\sap_automation_test_evidence\Projects\JenkinsTestCases\Deals\FailureReasons'
      $networkBasePath       = '\\tosca.corp.pattersoncompanies.com\sap_automation_test_evidence\Projects\JenkinsTestCases\Deals\FailureReasons'
      $buildNumber           = $env:BUILD_BUILDNUMBER
      $passResultPath        = "\\tosca.corp.pattersoncompanies.com\sap_automation_test_evidence\Projects\JenkinsTestCases\Deals\$targetTestCaseName\$targetTestCaseName-$buildNumber.html"

      Write-Host "üìÅ Scanning XML files in: $reportFolder"
      Write-Host "üîç Target test case: $targetTestCaseName"

      $xmlFile = Get-ChildItem -Path $reportFolder -Filter "*_results.xml" |
                 Sort-Object LastWriteTime -Descending |
                 Where-Object {
                   try {
                     [xml]$tmp = Get-Content $_.FullName -ErrorAction Stop
                     $tmp.SelectNodes('//testcase') | Where-Object { $_.name -eq $targetTestCaseName }
                   } catch { $false }
                 } |
                 Select-Object -First 1

      if (-not $xmlFile) {
        Write-Host "‚ùå No XML in '$reportFolder' contains test-case '$targetTestCaseName'."
        exit 1
      }

      Write-Host "‚úÖ Using XML: $($xmlFile.FullName)"

      [xml]$xml = Get-Content $xmlFile.FullName
      $tcNode   = $xml.SelectNodes('//testcase') | Where-Object { $_.name -eq $targetTestCaseName }

      if (-not $tcNode) {
        Write-Host "‚ùå Test case '$targetTestCaseName' not found (unexpected)."
        exit 1
      }

      $hasFailure = $tcNode.failure -ne $null
      $hasError   = $tcNode.error   -ne $null

      if ($hasFailure -or $hasError) {
        Write-Host "‚ùå Test case '$targetTestCaseName' FAILED."

        $failDir = Join-Path $failureOutputBasePath $targetTestCaseName
        if (-not (Test-Path $failDir)) { New-Item $failDir -ItemType Directory | Out-Null }

        Copy-Item $xmlFile.FullName -Destination (Join-Path $failDir $xmlFile.Name) -Force

        if ($hasFailure) {
          $msg = $tcNode.failure.InnerText.Trim()
        } elseif ($hasError) {
          $msg = $tcNode.error.InnerText.Trim()
        } else {
          $msg = 'Unknown failure'
        }

        $txtName = $xmlFile.Name.Replace('.xml', '.txt')
        $txtPath = Join-Path $failDir $txtName

        $lines = @(
          "TestCaseName: $targetTestCaseName",
          "BuildNumber : $buildNumber",
          "",
          "Failure Reason:",
          $msg
        )
        $lines | Set-Content -Path $txtPath

        Write-Host "üìÑ Failure details saved at: $txtPath"
        Write-Host "üîó UNC link: $networkBasePath\$targetTestCaseName\$txtName"

        exit 1
      }
      else {
        Write-Host "‚úÖ Test case '$targetTestCaseName' PASSED."
        Write-Host "üìÑ Result HTML: $passResultPath"
        exit 0
      }

# Step 4: Generate TOSCA Report Markdown
- task: PowerShell@2
  displayName: 'Generate Tosca Report Markdown'
  condition: always()
  inputs:
    targetType: 'inline'
    script: |
      $mdDir = "$(Build.ArtifactStagingDirectory)"
      if (-not (Test-Path $mdDir)) {
        New-Item -ItemType Directory -Path $mdDir | Out-Null
      }

      $mdPath = Join-Path $mdDir "ToscaReport.md"
      $testCase = "$(testCaseName)"
      $buildNum = "$(Build.BuildNumber)"
      $resultLink = "\\\\tosca.corp.pattersoncompanies.com\\sap_automation_test_evidence\\Projects\\JenkinsTestCases\\Deals\\$testCase\\$testCase-$buildNum.html"

      $markdownLines = @(
        "## Tosca Test Case Result",
        "",
        "**Test Case:** $testCase  ",
        "**Build Number:** $buildNum  ",
        "**Result Link:** [$testCase Report]($resultLink)"
      )
      $markdownLines | Set-Content -Path $mdPath -Encoding UTF8

      Write-Host "‚úÖ Markdown file created at $mdPath"

# Step 5: Publish Markdown Artifact
- task: PublishPipelineArtifact@1
  displayName: 'Publish Tosca Report Markdown'
  condition: always()
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)\ToscaReport.md'
    artifact: 'ToscaReportMarkdown'

# Step 6: Embed Tosca HTML Report in Summary Tab
- task: PowerShell@2
  displayName: 'Embed Tosca HTML Report in Summary'
  condition: always()
  inputs:
    targetType: 'inline'
    script: |
      $testCase = "$(testCaseName)"
      $buildNum = "$(Build.BuildNumber)"
      $webLink = "\\tosca.corp.pattersoncompanies.com\sap_automation_test_evidence\Projects\JenkinsTestCases\Deals\$testCase\$testCase-$buildNum.html"

      $summaryDir = "$(Pipeline.Workspace)\.pipeline"
      if (-not (Test-Path $summaryDir)) {
        New-Item -ItemType Directory -Path $summaryDir | Out-Null
      }

      $summaryPath = Join-Path $summaryDir "ToscaSummary.md"

      $lines = @()
      $lines += "## ‚úÖ Tosca HTML Report Summary"
      $lines += ""
      $lines += "**Test Case:** $testCase  "
      $lines += "**Build Number:** $buildNum  "
      $lines += ""
      $lines += "üîó [Click here to view Tosca HTML Report]($webLink)"
      $lines += ""
      $lines += "<iframe src='$webLink' width='100%' height='600px'></iframe>"

      $lines | Set-Content -Path $summaryPath -Encoding UTF8

      Write-Host "##vso[task.uploadsummary]$summaryPath"

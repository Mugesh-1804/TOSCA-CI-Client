trigger: none  # Manual trigger only

variables:
  toscaServerUrl: 'https://tosca.corp.pattersoncompanies.com'
  projectName: 'Tosca_PattersonAutomation'
  clientId: '-4m_zGxoBESTvMw7zvlmjg'
  clientSecret: '8t2ryHp3JkOVrc5837s0AwNVduR3u-AEOV9hY3xU2cfQ'  # Use secret from variable group

pool:
  name: 'TOSCA CI'

steps:

# Step 1: Run Tosca Test Event
- task: PowerShell@2
  displayName: 'Run Tosca Test Event'
  timeoutInMinutes: 240
  inputs:
    targetType: 'filePath'
    filePath: 'C:\\tmp\\ExecutionClients\\tosca_execution_clientNew.ps1'
    arguments: >
      -toscaServerUrl "$(toscaServerUrl)"
      -events '["$(testEventName)"]'
      -projectName "$(projectName)"
      -clientId "$(clientId)"
      -clientSecret "$(clientSecret)"
      -testCaseName "$(testCaseName)"

# Step 2: Copy and Rename Tosca Report with Build Number
- task: PowerShell@2
  displayName: 'Copy and Rename Tosca Report with Build Number'
  condition: always()
  inputs:
    targetType: 'inline'
    script: |
      $username = "$(shareUsername)"
      $password = "$(sharePassword)" | ConvertTo-SecureString -AsPlainText -Force
      $credential = New-Object System.Management.Automation.PSCredential ($username, $password)

      $testCase = "$env:testCaseName"
      $buildNumber = $env:BUILD_BUILDNUMBER

      $networkPath = "\\tosca.corp.pattersoncompanies.com\sap_automation_test_evidence"
      $sourceRelPath = "Projects\JenkinsTestCases\Deals\$testCase\$testCase.html"
      $targetRelPath = "Projects\JenkinsTestCases\Deals\$testCase\$testCase-$buildNumber.html"

      New-PSDrive -Name "Z" -PSProvider FileSystem -Root $networkPath -Credential $credential -Persist
      $sourcePath = "Z:\$sourceRelPath"
      $targetPath = "Z:\$targetRelPath"

      if (Test-Path $sourcePath) {
          Copy-Item -Path $sourcePath -Destination $targetPath -Force
          Write-Host "‚úÖ Report copied to: $targetPath"
      } else {
          Write-Host "‚ö†Ô∏è Report not found at: $sourcePath"
      }

      Remove-PSDrive -Name "Z"

# Step 3: Analyze Tosca Execution XML
- task: PowerShell@2
  displayName: 'Analyze Tosca Execution XML'
  condition: always()
  inputs:
    targetType: 'inline'
    script: |
        # === CONFIGURATION ===
            $reportFolder = "C:\tmp\ExecutionClients\results"
            $targetTestCaseName = "Deals_USDen_EligibleSalesOrg_BuyX_GetY"
            $failureOutputBasePath = "D:\sap_automation_test_evidence\Projects\JenkinsTestCases\Deals\FailureReasons"
            $networkBasePath = "\\tosca.corp.pattersoncompanies.com\sap_automation_test_evidence\Projects\JenkinsTestCases\Deals\FailureReasons"
            $buildNumber = $env:BUILD_BUILDNUMBER
            $passResultPath = "\\tosca.corp.pattersoncompanies.com\sap_automation_test_evidence\Projects\JenkinsTestCases\Deals\$targetTestCaseName\$targetTestCaseName-$buildNumber.html"

      # === Find Execution ID from Log ===
            $logPath = "$env:BUILD_ARTIFACTSTAGINGDIRECTORY\..\..\_temp\buildlog.txt"
            if (-not (Test-Path $logPath)) {
              Write-Host "‚ö†Ô∏è Build log file not found: $logPath"
              return
            }
            $logContent = Get-Content $logPath
            $executionId = $null
            foreach ($line in $logContent) {
                if ($line -match 'Successfully enqueued execution with id "(.*?)"') {
                    $executionId = $matches[1]
                break
                }
            }
            if (-not $executionId) {
                Write-Host "‚ùå Execution ID not found in logs."
            return
            }
            Write-Host "‚úÖ Execution ID found: $executionId"

      # === Find Corresponding XML File ===
            $xmlFile = Get-ChildItem -Path $reportFolder -Filter "*$executionId*_results.xml" | Select-Object -First 1
            if (-not $xmlFile) {
                Write-Host "‚ùå No XML report found for Execution ID: $executionId"
                return
            }
            Write-Host "‚úÖ Found XML report: $($xmlFile.FullName)"

      # === Load XML ===
            [xml]$xml = Get-Content $xmlFile.FullName

      # === Locate the Test Case Node ===
            $targetTestCase = $xml.SelectNodes("//testcase") | Where-Object { $_.name -eq $targetTestCaseName }

            if (-not $targetTestCase) {
                Write-Host "‚ùå Test case '$targetTestCaseName' not found in results."
            return
            }

            $hasFailure = $targetTestCase.failure -ne $null
            $hasError = $targetTestCase.error -ne $null

            if ($hasFailure -or $hasError) {
                Write-Host "‚ùå Test case '$targetTestCaseName' FAILED."

      # === Save Failure Output ===
          $failureDir = Join-Path $failureOutputBasePath $targetTestCaseName
          if (-not (Test-Path $failureDir)) {
              New-Item -Path $failureDir -ItemType Directory | Out-Null
          }

          $destXml = Join-Path $failureDir $xmlFile.Name
          Copy-Item -Path $xmlFile.FullName -Destination $destXml -Force

          $failureText = if ($hasFailure) {
                $targetTestCase.failure.InnerText.Trim()
          } elseif ($hasError) {
                $targetTestCase.error.InnerText.Trim()
          } else {
                "Unknown failure"
          }

          $txtPath = $xmlFile.Name.Replace(".xml", ".txt")
          $destTxt = Join-Path $failureDir $txtPath

          Set-Content -Path $destTxt -Value @"
          TestCaseName: $targetTestCaseName
          BuildNumber: $buildNumber

          Failure Reason:
          $failureText
          "@

              $uncLink = "$networkBasePath\$targetTestCaseName\$txtPath"
              $htmlLink = "üìÑ <a href='$uncLink'>Click here to View Failure Result</a>"

              Write-Host "`n$htmlLink`n"

              # === ‚ùó Optional: Fail the pipeline ===
              # Uncomment the next line if you want to fail the Azure DevOps step on Tosca failure:
              exit 1
            }
            else {
                Write-Host "‚úÖ Test case '$targetTestCaseName' PASSED."
                Write-Host "`nüìÑ View Result HTML: $passResultPath`n"

                $htmlLink = "üìÑ <a href='$passResultPath'>Click here for Result</a>"
                Write-Host "$htmlLink"
            }


# Step 4: Publish Report Link Markdown
- task: PublishPipelineArtifact@1
  displayName: 'Publish Tosca Report Link'
  condition: always()
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)\ToscaReport.md'
    artifact: 'ToscaReportMarkdown'

trigger: none  # Manual trigger only

# Step 1: Accept user input at runtime

# Step 2: Map parameters to variables for runtime use
variables:
  toscaServerUrl: 'https://tosca.corp.pattersoncompanies.com'
  projectName: 'Tosca_PattersonAutomation'
  clientId: '-4m_zGxoBESTvMw7zvlmjg'
  clientSecret: '8t2ryHp3JkOVrc5837s0AwNVduR3u-AEOV9hY3xU2cfQ'  # From variable group (secret)

# Step 3: Use a self-hosted Tosca agent pool
pool:
  name: 'TOSCA CI'

steps:

# Step 4: Run the Tosca test
- task: PowerShell@2
  displayName: 'Run Tosca Test Event'
  timeoutInMinutes: 240
  inputs:
    targetType: 'filePath'
    filePath: 'C:\\tmp\\ExecutionClients\\tosca_execution_clientNew.ps1'
    arguments: >
      -toscaServerUrl "$(toscaServerUrl)"
      -events '["$(testEventName)"]'
      -projectName "$(projectName)"
      -clientId "$(clientId)"
      -clientSecret "$(clientSecret)"
      -testCaseName "$(testCaseName)"

# Step 5: Analyze Tosca XML Results
- task: PowerShell@2
  displayName: 'Analyze Tosca Execution XML'
  condition: always()
  inputs:
    targetType: 'inline'
    script: |
      import jenkins.model.*
      import hudson.model.*
      import groovy.util.XmlSlurper
      import java.nio.file.Files
      import java.nio.file.StandardCopyOption

      def build = Thread.currentThread().executable
      def buildNumber = build.getNumber()

      def reportFolder = new File("C:\\tmp\\ExecutionClients\\results")
      def targetTestCaseName = "Deals_CanadaDen_EligibleSalesOrg_BuyX_GetY"
      def failureOutputBasePath = "D:\\sap_automation_test_evidence\\Projects\\JenkinsTestCases\\Deals\\FailureReasons"
      def networkBasePath = "\\\\tosca.corp.pattersoncompanies.com\\sap_automation_test_evidence\\Projects\\JenkinsTestCases\\Deals\\FailureReasons"
      def passResultPath = "\\\\tosca.corp.pattersoncompanies.com\\sap_automation_test_evidence\\Projects\\JenkinsTestCases\\Deals\\${targetTestCaseName}\\${targetTestCaseName}-${buildNumber}.html"

      def logLines = build.getLog(1000)
      def executionId = null
      def pattern = ~/Successfully enqueued execution with id "(.*?)"/
      logLines.each { line ->
          def matcher = pattern.matcher(line)
          if (matcher.find()) {
              executionId = matcher.group(1)
              return
          }
      }
      if (!executionId) {
          throw new RuntimeException("❌ Could not find execution ID in the logs.")
      }
      println "✅ Execution ID found: ${executionId}"

      def xmlFile = reportFolder.listFiles()?.find {
          it.name.toLowerCase().contains(executionId.toLowerCase()) && it.name.endsWith("_results.xml")
      }
      if (!xmlFile) {
          throw new RuntimeException("❌ XML result not found for Execution ID: ${executionId}")
      }
      println "✅ Found XML report: ${xmlFile.absolutePath}"

      def xml = new XmlSlurper().parse(xmlFile)
      def targetTestCase = xml.'**'.find {
          it.name() == 'testcase' && it.@name == targetTestCaseName
      }
      if (!targetTestCase) {
          throw new RuntimeException("❌ Test case '${targetTestCaseName}' not found in results.")
      }

      def hasFailure = targetTestCase.failure.size() > 0
      def hasError = targetTestCase.error.size() > 0

      if (hasFailure || hasError) {
          println "❌ Test case '${targetTestCaseName}' FAILED."
          build.setResult(hudson.model.Result.FAILURE)

          def testCaseFailureDir = new File("${failureOutputBasePath}\\${targetTestCaseName}")
          if (!testCaseFailureDir.exists()) {
              testCaseFailureDir.mkdirs()
          }

          def targetXmlPath = new File(testCaseFailureDir, xmlFile.name)
          Files.copy(xmlFile.toPath(), targetXmlPath.toPath(), StandardCopyOption.REPLACE_EXISTING)
          println "📄 XML copied to: ${targetXmlPath.absolutePath}"

          def failureText = ""
          if (hasFailure) {
              failureText = targetTestCase.failure[0].text().trim()
          } else if (hasError) {
              failureText = targetTestCase.error[0].text().trim()
          } else {
              failureText = "Unknown failure"
          }

          def txtFile = new File(testCaseFailureDir, xmlFile.name.replace(".xml", ".txt"))
          txtFile.withWriter { writer ->
              writer.write("TestCaseName: ${targetTestCaseName}\n")
              writer.write("BuildNumber: ${buildNumber}\n\n")
              writer.write("Failure Reason:\n${failureText}")
          }
          println "📄 TXT copy saved to: ${txtFile.absolutePath}"

          def rawTxtPath = "${networkBasePath}\\${targetTestCaseName}\\${txtFile.name}"
          def linkHtml = "📄 <a href='${rawTxtPath}'>Click here to View Failure Result</a>"

          println "\n${linkHtml}\n"
          throw new RuntimeException("❌ Test case '${targetTestCaseName}' failed.")
      } else {
          println "✅ Test case '${targetTestCaseName}' PASSED."

          def linkHtml = "📄 <a href='${passResultPath}'>Click here for Result</a>"
          println "\n📄 View Result HTML: ${passResultPath}\n"
      }

# Step 6: Generate UNC report link and save as Markdown
- task: PowerShell@2
  displayName: 'Generate Tosca Report Path'
  condition: always()
  inputs:
    targetType: 'inline'
    script: |
      $testCase = "$env:testCaseName"
      $build = $env:BUILD_BUILDNUMBER
      $uncPath = "\\tosca.corp.pattersoncompanies.com\sap_automation_test_evidence\Projects\JenkinsTestCases\Deals\$testCase\$testCase-$build.html"

      Write-Host "`n======================================="
      Write-Host " Tosca Report Path (Always Shown):"
      Write-Host " $uncPath"
      Write-Host "=======================================`n"

      $markdown = "[Open Tosca Report]($uncPath)"
      Set-Content -Path "$(Build.ArtifactStagingDirectory)\ToscaReport.md" -Value $markdown

# Step 7: Publish the Markdown file as a pipeline artifact
- task: PublishPipelineArtifact@1
  displayName: 'Publish Tosca Report Link'
  condition: always()
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)\ToscaReport.md'
    artifact: 'ToscaReportMarkdown'

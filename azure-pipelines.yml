trigger: none  # Manual trigger only

variables:
  toscaServerUrl: 'https://tosca.corp.pattersoncompanies.com'
  projectName: 'Tosca_PattersonAutomation'
  clientId: '-4m_zGxoBESTvMw7zvlmjg'
  clientSecret: '8t2ryHp3JkOVrc5837s0AwNVduR3u-AEOV9hY3xU2cfQ'  # Use secret from variable group

pool:
  name: 'TOSCA CI'

steps:

# Step 1: Run Tosca Test Event
- task: PowerShell@2
  displayName: 'Run Tosca Test Event'
  timeoutInMinutes: 240
  inputs:
    targetType: 'filePath'
    filePath: 'C:\\tmp\\ExecutionClients\\tosca_execution_clientNew.ps1'
    arguments: >
      -toscaServerUrl "$(toscaServerUrl)"
      -events '["$(testEventName)"]'
      -projectName "$(projectName)"
      -clientId "$(clientId)"
      -clientSecret "$(clientSecret)"
      -testCaseName "$(testCaseName)"

# Step 2: Copy and Rename Tosca Report with Build Number
- task: PowerShell@2
  displayName: 'Copy and Rename Tosca Report with Build Number'
  condition: always()
  inputs:
    targetType: 'inline'
    script: |
      $username = "$(shareUsername)"
      $password = "$(sharePassword)" | ConvertTo-SecureString -AsPlainText -Force
      $credential = New-Object System.Management.Automation.PSCredential ($username, $password)

      $testCase = "$env:testCaseName"
      $buildNumber = $env:BUILD_BUILDNUMBER

      $networkPath = "\\tosca.corp.pattersoncompanies.com\sap_automation_test_evidence"
      $sourceRelPath = "Projects\JenkinsTestCases\Deals\$testCase\$testCase.html"
      $targetRelPath = "Projects\JenkinsTestCases\Deals\$testCase\$testCase-$buildNumber.html"

      New-PSDrive -Name "Z" -PSProvider FileSystem -Root $networkPath -Credential $credential -Persist
      $sourcePath = "Z:\$sourceRelPath"
      $targetPath = "Z:\$targetRelPath"

      if (Test-Path $sourcePath) {
          Copy-Item -Path $sourcePath -Destination $targetPath -Force
          Write-Host "✅ Report copied to: $targetPath"
      } else {
          Write-Host "⚠️ Report not found at: $sourcePath"
      }

      Remove-PSDrive -Name "Z"

# Step 3: Analyze Tosca Execution XML
- task: PowerShell@2
  displayName: 'Analyze Tosca Execution XML'
  condition: always()
  inputs:
    targetType: 'inline'
    script: |
      $reportFolder = "C:\tmp\ExecutionClients\results"
      $targetTestCaseName = "$(testCaseName)"
      $buildNumber = $env:BUILD_BUILDNUMBER
      $failureOutputBasePath = "\\tosca.corp.pattersoncompanies.com\sap_automation_test_evidence\Projects\JenkinsTestCases\Deals\FailureReasons"
      $networkBasePath = "\\tosca.corp.pattersoncompanies.com\sap_automation_test_evidence\Projects\JenkinsTestCases\Deals\FailureReasons"
      $passResultPath = "\\tosca.corp.pattersoncompanies.com\sap_automation_test_evidence\Projects\JenkinsTestCases\Deals\$targetTestCaseName\$targetTestCaseName-$buildNumber.html"

      $xmlFiles = Get-ChildItem -Path $reportFolder -Filter "*_results.xml"
      $xmlFile = $xmlFiles | Where-Object { (Get-Content $_.FullName) -match $targetTestCaseName } | Select-Object -First 1

      if (-not $xmlFile) {
          Write-Host "❌ No matching XML file found in $reportFolder for '$targetTestCaseName'"
          exit 1
      }

      [xml]$xml = Get-Content $xmlFile.FullName
      $testCaseNode = $xml.SelectSingleNode("//testcase[@name='$targetTestCaseName']")

      if (-not $testCaseNode) {
          Write-Host "❌ Test case '$targetTestCaseName' not found in XML."
          exit 1
      }

      $hasFailure = $testCaseNode.failure
      $hasError = $testCaseNode.error

      if ($hasFailure -or $hasError) {
          Write-Host "❌ Test case '$targetTestCaseName' FAILED."

          $failureDir = Join-Path $failureOutputBasePath $targetTestCaseName
          if (-not (Test-Path $failureDir)) {
              New-Item -Path $failureDir -ItemType Directory | Out-Null
          }

          $xmlCopyPath = Join-Path $failureDir $xmlFile.Name
          Copy-Item -Path $xmlFile.FullName -Destination $xmlCopyPath -Force

          $failureText = ""
          if ($hasFailure) { $failureText = $testCaseNode.failure.InnerText.Trim() }
          elseif ($hasError) { $failureText = $testCaseNode.error.InnerText.Trim() }
          else { $failureText = "Unknown failure" }

          $txtFile = $xmlFile.Name.Replace(".xml", ".txt")
          $txtPath = Join-Path $failureDir $txtFile

          $lines = @(
              "TestCaseName: $targetTestCaseName",
              "BuildNumber: $buildNumber",
              "",
              "Failure Reason:",
              "$failureText"
          )
          $lines | Set-Content -Path $txtPath

          $uncTxtPath = "$networkBasePath\$targetTestCaseName\$txtFile"
          $markdown = "[View Failure Reason]($uncTxtPath)"
          Set-Content -Path "$(Build.ArtifactStagingDirectory)\ToscaReport.md" -Value $markdown
      }
      else {
          Write-Host "✅ Test case '$targetTestCaseName' PASSED."
          $markdown = "[Open Tosca Report]($passResultPath)"
          Set-Content -Path "$(Build.ArtifactStagingDirectory)\ToscaReport.md" -Value $markdown
      }

# Step 4: Publish Report Link Markdown
- task: PublishPipelineArtifact@1
  displayName: 'Publish Tosca Report Link'
  condition: always()
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)\ToscaReport.md'
    artifact: 'ToscaReportMarkdown'
